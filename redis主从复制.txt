redis 的主从复制：
主库------>从库
*****************************
支持的模式：
• 结构模式
– 一主一从
– 一主多从
– 主从从

******************************
同步过程
1.从库向主库发起sync请求
2.主库生成新的线程，启动收集所有使数据改变的命令，存盘并发给从库
3.从库收集到了文件，加载到内存并存入自己的盘----实现第一次完全同步
4.主库中的新产生的命令------->同步给从库
*****
缺点：网络忙，系统忙会影响同步延迟
默认redis搭建好就是master,因此将其中一台配置成从库就行
    1.马上生效-----命令行输入  
查看信息：
info replication
slaveof 192.168.4.50(主机的ip) 6350(主机的端口)

    2.永久生效----配置文件
    永久主从同步且带认证：（同步数据时需要输入主库密码）
再从库上vim /etc/redis/6379.conf
       282  slaveof 192.168.4.50 6350------指定master
       289  masterauth 123456        ------指定需要的密码

修改后重启服务
*************************
主库坏掉时，访问从库上
主从从：----从1的状态还是从库。将从库2的slaveof指向从1

把一个从库再还原成主库 slaveof no one

*****************************
主从从或一主多从
当主库坏掉后：
手动：去从库执行slaveof no one 将从库变成主库
自动：哨兵模式-----》监视主库，坏掉后自动选举一个变成主库
主从从结构：再从1上写一个/etc/sentinel.conf
**********************************
sentinel monitor redis50(主库随便的名字) 192.168.4.50(监视的主库ip)  6350(主库的端口)  -----主库上面不设置密码（从库同步时系统性能会下降30%）-
/sentinal auth-pass mymaster 123456/---->加主库的密码
*************************************
哨兵可以再任何redis上开监视。一主多从，多从一定要开哨兵，主库也可以开哨兵


——————————————————————————————————
注意：
在生产环境下与第三方软件高可用集群软件一起使用：keepalived----谁是主库就把vip地址部署到谁上面
在生产环境中不设置密码，通过防火墙保证集群的安全

#################################################################
redis持久化的两种方式：
RDB
按照指定时间间隔，将内存中的文件考到硬盘指定位置下
/var/lib/redis/6379---->dump.rdb（一定时间，生成.rdb文件）
配置文件设置：
254：dbfilename dump.rdb
 219 save 900 1  (900s内，有1个数据改变就存一下)
 220 save 300 10 （300s内有10行改变）
 221 save 60 10000
1.根据配置中的间隔，自动存盘    flushall+shutdown----->清空并保存
2.当停止服务时，会自动存盘
+++++++++++++++++++++++++++
RDB的存盘工作过程，存盘优缺点
到规定时间时，会创建一个子程序（redis‘）单独执行存盘操作，会把到时间的数据放入临时文件里，然后用这个文件替换掉原来的dump.rdb文件中，
优点：
1.确保了极高的性能
2.如果要进程大规模数据恢复,且对数据完整行要求不是非常高,使用 RDB 比 AOF 更高效
缺点：
1.对数据丢失不那么严格，意外宕机,最后一次持久化的数据会丢失。（因为复制的radis是独立的）

适用场景：大规模存盘且允许丢失
************************************************************

手动马上存盘：>save ------当写时自动上写锁
              >bgsave----不会时不会上锁/ 不阻塞写存盘
数据恢复------------------------------

AOF
vim /
：672  appendfilename "appendonly.aof" // 文件名– appendonly yes // 启用 aof ,默认 no



追加文件的写
1.记录 redis 服务所有写操作。
2.不断的将新的写操作,追加到文件的末尾。
3.使用 cat 命令可以查看文件内容
AOF 文件记录,写操作的三种方式
– appendfsync always   // 有新的写操作立即记录,性能差,完整性好。
– appendfsync everysec // 每秒记录一次,宕机时会丢失 1 秒的数据
– appendfsync no       // 从不记录

*******************************************************
日志重写 ( 日志文件会不断增大 ) ,何时会触发日志重写

– redis 会记录上次重写时 AOF 文件的大小,默认配置是当 aof 文件是上次 rewrite 后大小的 1 倍且文件大于64M 时触发。
– auto-aof-rewrite-percentage 100
– auto-aof-rewrite-min-size 64mb

***注意*****
备份后再重启：先加载AOF，再加载RDB

若文件格式错误：用命令恢复到最后一词的正确模式：
1.redis-check-aof --fix appendonly.aof
2.rm -rf /var/run/redis_6379.pid(删除一存在的pid)

可定期拷贝appendonly.aof ,可以保证其正常启动数据不丢失.bak--->/opt
将备份的.bak放到内存的目录下，改为原名即可
cp 数据库目录 /appendonly.aof  备份目录• 恢复数据
把备份的 dump.rdb 文件拷贝回数据库目录 , 重启 redis 服务
--------------------------------------------------------------------
AOF的优缺点：
优点：
可以灵活的设置同步持久化 appendfsync alwayls 或 异步持久化 appendfsync verysec– 宕机时,仅可能丢失 1 秒的数据
缺点：
AOF 文件的体积通常会大于 RDB 文件的体积。执行 fs ync 策略时的速度可能会比 RDB 慢。
#######################################################################

数据类型
string
list
hash
set 
zset

• set key value [ex seconds] [px milliseconds] [nx|xx]

– 设置 key 及值,过期时间可以设置为秒或毫秒为单位
– nx 只有 key 不存在,才对 key 进行操作
– xx 只有 key 已存在,才对 key 进行操作
------------------------------------------------------
setrange key offset value
– 从偏移量开始复写 key 的特定位的值
>set first "hello world"
>setrange first 6 “Redis”
> get first
"hello redis"
------------------------------------------------
• strlen key
– 统计字串长度
>strlen first

-------------------------------------------------
append key value
– 字符存在则追加,不存在则创建 key 及 value
– 返回值为 key 的长度

>append myname jacob
------------------------------------------------------
• setbit key offset value
– 对 key 所存储字串,设置或清除特定偏移量上的位 (bit)
– Value 值可以为 1 或 0 , offset 为 0~2^32 之间
– key 不存在,则创建新 key
  bit: 第 0 位为 1 ,第一位为 0（8位=1字节）
>setbit bit 0 1
>setbit bit 1 0
>setbit bit 2 0
>setbit bit 3 1
>bitcount bit----统计结果
// 结果为 2

setbit peter 100 1 // 网站上线 100 天用户登录了一次

-----------------------------------------------------
• decr key
– 将 key 中的值减 1 , key 不存在则先初始化为 0 ,再减 1
>set test 10
>decr test
------------------------------------------
• decrby key decrement
– 将 key 中的值,减去 decrement
>set count 100
>decrby count 20
--------------------------------------
• get key
– 返回 key 所存储的字符串值
– 如果 key 不存在则返回特殊值 nil
– 如果 key 的值不是字串,则返回错误, get 只能处理字串

----------------------------------------
getrange key start end
– 返回字串值中的子字串,截取范围为 start 和 end
– 负数偏移量表述从末尾计数, -1 表示最后一个字符, -2
表示倒数第二个字符
>set first “hello,the world”
>getrange first -5 -1
>getrange first 0 4
------------------------------------------------
incr key
– 将 key 的值加 1 ,如果 key 不存在,则初始为 0 后再加 1
– 主要应用为计数器
>set page 20
>incr page
---------------------------------------
• incrby key increment
– 将 key 的值增加 increment
• incrbyfloat key increment
– 为 key 中所储存的值加上浮点数增量 increment
>set num 16.1
>incrbyfloat num 5.2(在原来的基础上加5)
--------------------------------------------
• mget key [key...]
– 一次获取一个或多个 key 的值,空格分隔, < 具有原子性

• mset key value [key value ...]
– 一次设置多个 key 及值,空格分隔, < 具有原子性 >

*****************************************************************

Hash 表简介----让定义的变量可以储存多个key/values  key/values
key----->列   values------->列的值

—将一个对象存储为 hash 类型,较于每个字段都存储成string 类型更能节省内存
hset key field value– 将 hash 表中 field 值设置为 value
>hset site google 'www.g.cn‘
>hset site baidu 'www.baidu.com'
• hget key filed
– 获取 hash 表中 field 的值
>hget site google
---------------------------------------------------------------------------------------------
hmset key field value [field value...]
– 同时给 hash 表中的多个 field 赋值
>hmset site google www.g.cn(赋值) baidu www.baidu.com(赋值)
• hmget key field [field...]
– 返回 hash 表中多个 field 的值
>hmget site google baidu
• hkeys key
– 返回 hash 表中所有 field 名称
>hmset site google www.g.cn baidu www.baidu.com
>hkeys site
--------------------------------------------------------------------------------------------
hgetall key
– 返回 hash 表中所有 field 的值
• hvals key
– 返回 hash 表中所有 filed 的值
>hvals key
• hdel key field [field...]
– 删除 hash 表中多个 field 的值,不存在则忽略
>hdel site google baidu


****************************************************

list列表
Redis 的 list 是一个字符队列
• 先进后出
• 一个 key 可以有多个值
-------------------------------------------------------------------------------------
• lrange key start stop
– 从开始位置读取 key 的值到 stop 结束
>lrange list     0        2
>lrange list     0       -1
>lrange list     0       -2
                第几位开始读  读到-2(倒数第二位) 2(正数第二位)
------------------------------------------------------------------------------------------ 
// 从 0 位开始,读到 2 位为止
// 从开始读到结束为止
// 从开始读到倒数第 2 位值

---------------------------------------------------------------------------
增
从头
lpush key value [value...]
– 将一个或多个值 value 插入到列表 key 的表头
– Key 不存在,则创建 key
>lpush list a b c //list1 值依次为 c b a
等同于 lpush list a; lpush list b; lpush list c

从末尾
rpush key value [value...]
– 将 value 插入到 key 的末尾
>rpush list3 a b c
>rpush list3 d
//list3 值为 a b c
// 末尾插入 d
• rpop key
– 删除并返回 key 末尾的值
– >rpush list3 a b c //list3 值为 a b c
>rpush list3 d
// 末尾插入 d

-------------------------------------------------------------------------------
删
lpop key
– 移除并返回列表头元素数据, key 不存在则返回 nil
>lpop list
// 删除表头元素,可以多次执行
• llen key
– 返回列表 key 的长度
--------------------------------------------------------------------------
查
lindex key index(第几个值)
– 返回列表中第 index 个值
如 lindex key 0 ; lindex key 2; lindex key -2

改
• lset key index value
– 将 key 中 index 位置的值修改为 value
>lset list 3 test
// 将 list 中第 3 个值修改为 test

----------------------------------------------------------------------

列的增删改查：
删除：
del key [key...]
– 删除一个或多个 key
• exists key
– 测试一个 key 是否存在
• expire key seconds
– 设置 key 的生存周期
• persist key
– 设置 key 永不过期
• ttl key
– 查看 key 的生存周期
-------------------------------------------------------------------------
查
keys 匹配
– 找符合匹配条件的 key ,特殊符号用 \ 屏蔽
>keys *
// 显示所有 key
>keys h?llo // 匹配 hello,hallo,hxllo 等
>keys h*llo // 匹配 hllo 或 heeello 等
>keys h[ae]lo // 匹配 hello 和 hallo
• flushall
– 清空所有数据
• select id
– 选择数据库, id 用数字指定,默认数据库为 0
>select 0
>select 2
--------------------------------------------------------------------
move key db_id
– 将当前数据库的 key 移动到 db_id 数据库中
>move key 1
// 将 key 移动到 1 数据库中
• rename key newkey
– 给 key 改名为 newkey , newkey 已存在时,则覆盖
其值
• renamenx key newkey
– 仅当 newkey 不存在时,才将 key 改名为 newkey
----------------------------------------------------------------
sort key
– 对 key 进行排序
>lpush cost 1 8 7 2 5
>sort cost
// 默认对数字排序,升序
>sort cost desc
// 降序
>lpush test “about” “site” “rename”
>sort test alpha
// 对字符排序
>sort cost alpha limit 0 3
// 排序后提取 0-3 位数据
>sort cost alpha limit 0 3 desc
>sort cost STORE cost2 // 对 cost 排序并保存为 cost2
• type key
– 返回 key 的数据类型
----------------------------------------------------------------------

搭建redis服务器
redis服务的基本使用：
LNMP+Redis

搭建redis集群
（解决访问节点单点故障 同时实现数据的备份）
管理集群： 向集群里添加和删除（master slave）
radis主从同步
设置slave
在从库上设置哨兵模式
redis服务持久化 RDB AOF
redis数据库类型 字符 set get setbit setcount incrby decr incrbyfloat 


