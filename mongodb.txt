介于关系数据库和非关系数据库之间的产品
---------------------------------------------------------------------------
– 一个基于分布式文件存储的数据库。
– 由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。
– MongoDB 将数据存储为一个文档,数据结构由键值(key=>value) 对组成。
– MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档,数组及文档数组。
mysql   mongeDB
库          库
表          集合
记录        文档
shard    partition

解压----移动
将bin移动到/usr/local/mongodb
并创建etc log data/db文件目录
cp -r ./bin/ /usr/local/mongodb
----------------------------------------------------------
手动创建服务主配置文件
[root@bogon ~]# vim mongodb.conf

logpath=/usr/local/mongodb/log/mongodb.log
logappend=true   # 追加的方式记录日志信息
dbpath=/usr/local/mongodb/data/db # 数据库目录
fork=true  # 守护进程方式运行
----------------------------------------------------------

vim /etc/prfile
增加快捷方式mongodb
export PATH=/usr/local/mongodb/bin:$PATH
source /etc/profile-----使路径生效
echo $PATH       ------ 查看所有路径

启动服务：
mongod -f /usr/local/mongodb/etc/mongodb.conf
关闭：
mongod --shutdown -f /usr/local/mongodb/etc/mongodb.conf

################################################################

• 库管理命令: 查看 创建 切换 删除
-------------------------------------------------------------
– show dbs 查看已有的库
显示当前所在的库
– db
– use 库名 切换库,若库不存在的话 自动延时创建库
– show collections 或 show tables 查看库下已有的集合
– db.dropDatabase()  删除当前所在的库
-------------------------------------------------------------

文档管理命令: 查看 统计 添加 删除
– db. 集合名 .find()
– db. 集合名 .count()
– db. 集合名 .insert({“name”:”jim”})
– db. 集合名 .find({ 条件 })
– db. 集合名 .findOne() # 返回一条文档
– db. 集合名 .remove({}) # 删除所有文档
– db. 集合名 .remove({ 条件 }) # 删除与条件匹配的所有文
档



• 集合管理命令:查看 创建 删除
– show collections 或 show tables # 查看集合
# 删除集合
– db. 集合名 .drop()
– db. 集合名 .save({'',''})在时,创建并添加文档

> db.c1.save({name:"bob",age:19,sex:"boy"})
> db.c1.save({name:"bob",class:"NSD1803"})
> db.c1.find()
{ "_id" : ObjectId("5b403a048a550e997d0df935"), "name" : "bob", "age" : 19, "sex" : "boy" }
{ "_id" : ObjectId("5b403a2b8a550e997d0df936"), "name" : "bob", "class" : "NSD1803" }

db.c1.find()
db.c1.insert({name:"redd",age:18})
db.c1.remove({"name":redd})
-------------------------------------------------------------------
管理数据库
集合管理
文档管理  查看  插入  删除  修改



###############################################
Mongodb
字符类型
– UTF-8 字符串都可以表示为字符串类型的数据
– {name:” 张三” } 或 { school:“tarena”}
• 布尔 bool
– 布尔类型有两个值 true 和 false , {x:true}
• 空 null
– 用于表示空值或者不存在的字段, {x:null}

数字类型
数值
– shell 默认使用 64 为浮点型数值。 {x : 3.14} 或 {x : 3} 。
– NumberInt ( 4 字节整数) {x:NumberInt(3)}--->存3
– NumberLong ( 8 字节整数) {x:NumberLong(3)}--->存3

数组 array
– 数据列表或数据集可以表示为数组
– {x : [“a“ ,“ b”,”c”]}
---------------------------------------------------------------------
代码 / 日期 / 对象
• 代码
– 查询和文档中可以包括任何 JavaScript 代码
– {x: function( ){/* 代码 */}}

• 日期
– 日期被存储为自新纪元依赖经过的毫秒数,不存储时区
– {x:new Date( )}
• 对象
– 对象 id 是一个 12 字节的字符串,是文档的唯一标识
– {x: ObjectId() }-------ObjectId()的值是前面的ID值，有唯一性，类似于主键

---------------------------------------------------------------------
内嵌 / 正则表达式
• 内嵌
– 文档可以嵌套其他文档,被嵌套的文档作为值来处理
– {tarena: {address:“Beijing”,tel:“888888”,person:”hanshaoyun”}}
• 正则表达式
– 查询时,使用正则表达式作为限定条件 ----匹配相关表达式子的条件，如:^a,$L内容会自动匹配
– {x:/ 正则表达式 /}

###################################################################
导入与导出
导出：
语法格式 1
– #mongoexport [--host IP 地址 --port 端口 ] -d 库名 -c 集合名 -f 字段名 1, 字段名 2
--type=csv
> 目录名 / 文件名 .csv
./mongoexport --host 192.168.4.51 --port 27051 -d name -c c1 -f _id,name,class --type=csv > /root/c1.csv

• 语法格式 2
– #mongoexport --host IP 地址 --port 端口
- 库名 -c 集合名 -q ‘{ 条件 }’ -f 字段名 1 ,字段名 2--type=csv 
> 目录名 / 文件名 .csv     注意:导出为 csv 格式必须使用 -f 指定字段名列表 !!!
-----------------------------------------------------------------------------------------------------
语法格式 3
#mongoexport [ --host IP 地址 --port 端口 ]-d 库名 -c 集合名 [ -q ‘{ 条件 }’ –f 字段列表] --type=json > 目录名 / 文件名 .json
# ./mongoexport（执行当前路径下的快捷方式） --host 192.168.4.51 --port 27051 -d name -c student  --type=json  
> /root/t1.json(.json格式，可以不用事先创建)
#############################################################

数据导入
• 语法格式 1
– #mongoimport –host IP 地址 – port 端口 -d 库名 – c 集合名  --type=json  目录名 / 文件名 .json



----------------------------------------------------------------------------------------------
• 语法格式 2
– #mongoimport –host IP 地址 – port 端口 -d 库名 – c 集合名  --type=csv --headerline [--drop] 目录名 / 文件名 .csv
mongpdbimport -host 192.168.4.50 -port 27050 -d name -c student -f _id,name,class  --type=csv  
*******************************************************************************
注意：在有文件的表中，以追加的方式往里放
      只导入规定的列，如_id,name
      导入数据时库和集合不存在时,会创建库和集合后导入数据
      反之以追加的方式导入数据到集合里,使用— drop 
      选项可以删除原有数据后导入新数据 --headerline 忽略标题

将passwd中的文件导入到库中：
	cp /etc/passwd  /root
在库中先创建相同字段（列）的c3表
导出c3表到/root/c3.csv
	./mongoexport --host 192.168.4.51 --port 27051 -d name -c c3 -f _id,name,password,uid,gid,comment,homedir,shell --type=csv > /root/c3.csv
将passwd导入c3.csv
	sed -i '$r passwd' c3.csv
将c3.csv中的：替换为,
	sed -i '$r passwd' c3.csv
导入相关的c3.csv到库中
	mongoimport --host 192.168.4.51 --port 27051 -d name -c c3 --headerline  --drop  --type=csv  /root/c3.csv 
进入数据库查看文件信息：
***********************************************************************************
备份数据所有库到当前目录下的 dump 目录下
# mongodump [ --host ip 地址 --port 端口 ]
• 备份时指定备份的库和备份目录
# mongodump [ --host ip 地址 --port 端口 ] -d 数据库名 -c 集合名 -o 目录
目录无需事先创建 备份时指定即可!!!

• 查看 bson 文件内容（用cat看是乱码）
#bsondump ./dump/bbs/t1.bson
------------------------------------------------------------------------------
数据的恢复
• 语法格式
– mongorestore --host IP 地址 --port 端口 -d 数据库名 [ -c 集合名 ] 备份目录名

