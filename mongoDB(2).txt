mongoDB 副本集
########################################################################
MongoDB 副本集是将数据同步在多个服务器的过程（复制的过程）。
       – 复制提供了数据的冗余备份,并在多个服务器上存储数据副本,提高了数据的可用性, 并可以保证数据的安全性。
       – 复制还允许您从硬件故障和服务中断中恢复数据

mongodb 的复制至少需要两个节点。其中一个是主节点,负责处理客户端请求,其余的都是从节点,负责复制主节点上的数据。
– mongodb 各个节点常见的搭配方式为:一主一从、一主多从。
– 主节点记录在其上的所有操作 oplog ,从节点定期轮询主节点获取这些操作,然后对自己的数据副本执行这些操作,从而保证从节点的数据与主节点一致。
– MongoDB 在 1.6 版本对开发了新功能 replica set,这比之前的 replication 功能要强大一 些,增加了故障自动切换和自动修复成员节点,各个
  DB 之间数据完全一致,大大降低了维 护成功。使用 replica set故障切换完全自动。-------》采用副本集合的方式实现主从配置

启动程序
猜看服务信息
连接服务

进入第一台主机创建集群（谁创建谁就是主）
生产环境下对主机上设置Vip
创建集群
config = {
_id:"rs1",
members:[
{_id:0,host:"192.168.4.51:27051",priority:10},--------->优先级越高越好（可设置也可不设置）
{_id:1,host:"192.168.4.52:27052",priority:9},
{_id:2,host:"192.168.4.53:27053",priority:8},
]
};

>rs.initiate(config)
检查：
>rs.status()
>rs.isMaster()


一般来说从库上面不允许执行任何操作
需要允许从库进行读操作。
> db.getMongo().setSlaveOk()

当51挂掉后，自动选举52当主库，53同步52

51恢复后，自动加入集群，但成为从库

一定要保证50%以上的主机是好的，否则集群会坏掉
++++++++++++++++++++++++++++++++++++++
停止服务，删掉配置文件中的相关配置，重启服务

##########################################################################

save命令若id字段相同，则新加入的数据会覆盖掉原来的内容（没有的写入，有的修改）
insert（不存在时写入，存在时不能写入）
以上两个都不能一次写多条
insertMany(一次写多条)
 db.c1.insertMany([{name:"JJI",age:11},{name:"alass",age:25}])
([{第一条}，{第二条}，。。。{n}   ])

------------------------------------------------------------------------
查询的条件：
db.c1.find({uid:1},{_id:1，name:1,uid:1})----条件成立的时候(uid=1),要显示的用1表示
db.c1.find({uid:1},{_id:1，name:0,uid:0})----条件成立的时候(uid=1),不显示的用0表示
-------------------------------------------------------------------------
排序：
db.c1.find().skip(2)跳过前两行
db.c1.find().sort({uid:1})按uid字段顺序排-1为倒序排列
---------------------------------------------------------------------
db.c1.find({name:"root",uid:0},{_id:0,name:1})
逻辑且：多个条件同时成立，
注意，每个条件需要用{}阔起来，注意他们的代表的意思，后面的是要显示的列（字段名）
范围内比较
– $in 在...里
– $nin 不在...里
– $or 或
– > db.user.find({uid:{$in:[1,6,9]}})
– > db.user.find({uid:{$nin:[1,6,9]}})
– > db.user.find({$or: [{name:"root"},{uid:1} ]})

e.g  db.c1.find({$or:[{name:{$in:["tom","KKK"]}},{age:11} ]})

总结：
（所有的筛选条件）
{单个条件}
[选项池]  
$字符：[  受范围控制的语句 ]

正则匹配：
db.c3.find({字段名：/正则表达式/},{显示的字段名})
> db.user.find({name: /^a/ })

• 数值比较
db.user.find( { uid: { $gte:10,$lte:40} } )
> $lt $lte $gt $gte $ne 
    <  <=     >  >=   !=
> db.user.find( { uid: { $gte:10,$lte:40} } , {_id:0,name
:1,uid:1})
> db.user.find({uid:{$lte:5,}})

• 匹配 null , 也可以匹配没有的字段
> db.user.save({name:null,uid:null})
> db.user.find({name:null})
{ "_id" : ObjectId("5afd0ddbd42772e7e458fc75"), "name" : null, "uid" : null }

#############################################################

update()

》语法格式
– > db. 集合名 .update({ 条件 },{ 修改的字段 } )
注意:把文件的其他字段都删除了,只留下了 password 字段
》且只修改与条件匹配的第 1 行 !!!
------------------------------------------------------------------------------------
改
$set / $unset
• $set 条件匹配时,修改指定字段的值
– db.user.update({ 条件 },$set: { 修改的字段 })
– db.user3.update({name:"bin"},{$set:{password:"A"}}

多文档更新
• 语法格式:默认只更新与条件匹配的第 1 行
– > db.user.update({ 条件 },{$set:{ 修改的字段 }} ,false,true )
– > db.user.update({name:“bin”},{$set:{password:“abc12123”}} ,false,true)----全部匹配

删
• $unset 删除与条件匹配文档的字段
– db. 集合名 .update({ 条件 },{$unset:{key:values}})
– db.user3.update({name:"bin"},{$unset:{passwor
d:"A"}})



----------------------------------------------------------------------------------------------
$inc
• $inc 条件匹配时,字段值自加或自减
– Db. 集合名 .update({ 条件 },{$inc:{ 字段名 : 数字 }})
正整数自加 负整数自减!!!!
– db.user.update({name:"bin"},{$inc:{uid:2}}) 字段值
自加 2
– db.user.update({name:“bin”},{$inc:{uid:-1}}) 字
段自减 1

----------------------------------------------------------------------------------------

数组类型的数的操作：

$push / $addToSet
• $push 向数组中添加新元素
– db. 集合名 .update({ 条件 },{$push:{ 数组名 :“ 值” }})
– db.user.insert({name:"bob",likes:
["a","b","c","d","e","f"]})
– db.user.update({name:“bob”},{$push:{likes:“w"}})


• $addToSet 避免重复添加
– db. 集合名 .update({ 条件 },{$addToSet:{ 数组名 :”
值” }}) db.user.update({name:"bob"},{$addToSet:{likes:
“f"}})

-------------------------------------------------------------------------------------
$pop /$pull
• $pop 从数组头部删除一个元素
– db. 集合名 .update({ 条件 },{$pop:{ 数组名 : 数字 }})
– db.user.update({name:"bob"},{$pop:{likes:1}})
– db.user.update({name:"bob"},{$pop:{likes:-1}})

1 删除数组尾部元素 -1 删除数组头部元素
• $pull 删除数组指定元素
– db. 集合名 .update({ 条件 },{$pull:{ 数组名 : 值 }})
– db.user.update({name:"bob"},{$pull:{likes:"b"}})

---------------------------------------------------------------------------------
$drop/$remove
• $drop 删除集合的同时删除索引
– db. 集合名 .drop( )
– db.user.drop( )
• remove() 删除文档时不删除索引
– db. 集合名 .remove({}) // 删除所有文档
– db. 集合名 .remove({ 条件 }) // 删除与条件匹配的文档

-------------------------------------------------------------------------------------


